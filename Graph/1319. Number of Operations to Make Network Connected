// dfs traversal approach
class Solution {
public:
    vector<vector<int>> buildGraph(int n, vector<vector<int>>& connections){
        vector<vector<int>> graph(n);

        for(vector<int> connection : connections){
            graph[connection[0]].push_back(connection[1]);
            graph[connection[1]].push_back(connection[0]);
        }

        return graph;
    }
    void dfs(int curr, vector<vector<int>>& graph, vector<bool>& visited){
        if(!visited[curr]){
            visited[curr] = true;
            
            for(int neigh : graph[curr]){
                dfs(neigh, graph, visited);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        // edge cases
        if(connections.empty() || connections.size() < n - 1){
            return -1;
        }

        // build graph
        vector<vector<int>> graph = buildGraph(n, connections);
        vector<bool> visited(n, false);
        int noOfConnectedComponents = 0;

        // get the no. of connected components
        for(int i = 0;i < n;i++){
            if(!visited[i]){
                dfs(i, graph, visited);
                noOfConnectedComponents++;
            }
        }

        return noOfConnectedComponents - 1;
    }
};

// union find approach
class Solution {
public:
    int find(int curr, vector<int>& parent){
        if(curr == parent[curr]){
            return curr;
        }

        return find(parent[curr], parent);
    }
    void _union(int a, int b, vector<int>& parent, int& countComponents){
        int findA = find(a, parent);
        int findB = find(b, parent);

        if(findA == findB){
            return;
        }
        parent[findA] = findB;
        countComponents--;
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        // edge cases
        if(connections.empty() || connections.size() < n - 1){
            return -1;
        }
        // initialization
        vector<int> parent(n);
        for(int i = 0;i < n;i++){
            parent[i] = i;
        }
        int countComponents = n;
        for(vector<int> connection : connections){
            _union(connection[0], connection[1], parent, countComponents);
        }

        return countComponents - 1;
    }
};
