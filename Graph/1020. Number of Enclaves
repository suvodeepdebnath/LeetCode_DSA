class Solution {
    int dirs[5] = {0, -1, 0, 1, 0};
public:
    int numEnclaves(vector<vector<int>>& grid) {
        // edge cases
        if(grid.empty() || grid[0].empty()){
            return 0;
        }
        
        // initialization
        int m = grid.size();
        int n = grid[0].size();
        
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int noOfLandCells = 0;
        
        // iterate over the grid
        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                int noOfOnes = 0;
                if(!visited[i][j] && grid[i][j] && dfs(grid, i, j, visited, noOfOnes)){
                    noOfLandCells += noOfOnes;
                }
            }
        }
        
        return noOfLandCells;
    }
    
    bool dfs(vector<vector<int>>& grid, int i, int j, vector<vector<bool>>& visited, int& noOfOnes){
        // edge cases
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()){
            return false;
        }
        
        // when the current cell is zero
        if(grid[i][j] == 0 || visited[i][j]){
            return true;
        }
        visited[i][j] = true;
        
        noOfOnes++;
        
        bool flag = true;
        
        // visit 4-directionally
        for(int d = 0;d < 4;d++){
            int next_i = i + dirs[d];
            int next_j = j + dirs[d + 1];
            
            flag = flag & dfs(grid, next_i, next_j, visited, noOfOnes);
        }
        
        return flag;
    }
};
