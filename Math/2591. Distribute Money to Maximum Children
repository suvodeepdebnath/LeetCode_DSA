// first approach
class Solution {
public:
    int distMoney(int money, int children) {
        // edge case
        if(money < children){
            return -1;
        }
        if(children == 1 && money == 4){
            return -1;
        }
        // initialization
        int count = 0;
        
        // give one coin to everyone
        money -= children;
        // give 7 coins till possible
        while(money >= 7 && count < children){
            money -= 7;
            count++;
        }
        // when count is equal to children
        if(count == children){
            if(money == 0)
                return count;
            else
                return count - 1;
        }
        // when we have money is equal to 3
        if(money == 3){
            if(children - count >= 2){
                return count;
            }else{
                return count - 1;
            }
        }
        return count;
    }
};

/*
Approach
At begining I was thinking about each condintions, but was littile bit tricky.

Then I come up with following way of figuring out the solution with out thinking much condition.

Keep on assigning 8 to each children until the remaining is greater than or equal to remainig children ( So that it is always possible to give at least 1 to each children).
*/

class Solution {
public:
    int distMoney(int money, int children) {
        int ans = 0;
        if(money < children) return -1;
        if(money > children * 8) return children - 1;
        
        while(money > 0 && money - 8 >= children - 1){
          ans++; money -= 8; children--;
        }
        if(money == 4 && children == 1) ans--;
        return ans;
    }
};
