// my binary search approach
class Solution {
public:
    bool isRepairAllCarsPossible(vector<int>& ranks, int cars, long long mid){
        int n = ranks.size();
        long count = 0;
        
        for(int i = 0;i < n;i++){
            count += sqrt(mid / ranks[i]);
        }
        
        return count >= cars;
    }
    long long repairCars(vector<int>& ranks, int cars) {
        long long low = 1, high = 100000000000000L;
        
        // time reference
        while(low < high){
            long long mid = low + (high - low) / 2;
            
            if(isRepairAllCarsPossible(ranks, cars, mid)){
                high = mid;
            }else{
                low = mid + 1;
            }
        }
        
        return low;
    }
};

// same approach without any extra function call
class Solution {

	public long repairCars(int[] ranks, int cars) {
		long left = 1, right = 100000000000000L;
		while (left < right) {
			long mid = (left + right) / 2, count = 0;
			for (int rank : ranks) {
				count += Math.sqrt(mid / rank);
			}
			if (count < cars) {
				left = mid + 1;
			} else {
				right = mid;
			}
		}
		return left;
	}
}
