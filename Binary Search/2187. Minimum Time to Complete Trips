class Solution {
public:
    bool isTripPossible(vector<int>& time, long long allocatedTime, int totalTrips){
        long long countTrips = 0;

        // get the total count of trips possible 
        for(int i = 0;i < time.size();i++){
            countTrips += allocatedTime / time[i];
        }

        return countTrips >= totalTrips? true : false;
    }
    long long minimumTime(vector<int>& time, int totalTrips) {
        // initialization
        long long low = 0, high = 0;
        int maxTime = 0;
        // get the max time
        for(int i = 0;i < time.size();i++){
            maxTime = (maxTime, time[i]);
        }
        // total time to complete the trips
        high = (long long)maxTime * totalTrips;
        // get the time to complete totalTrips
        while(low < high){
            long long midTime = low + (high - low) / 2;

            if(isTripPossible(time, midTime, totalTrips)){
                high = midTime;
            }else{
                low = midTime + 1;
            }
        }

        return low;
    }
};
