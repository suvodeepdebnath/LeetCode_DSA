class Solution {
public:
    // [1, 3, 5], [1,2,3,4,5]
    vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {
        // initialization
        int n = spells.size();
        int m = potions.size();
        vector<int> noOfSuccessfulPairs(n, 0);
        vector<pair<int, int>> sortedSpells;

        // edge cases
        if(spells.empty()){
            return noOfSuccessfulPairs;
        }

        // insert all the elements into the sortedSpells with its original index
        for(int i = 0;i < n;i++){
            sortedSpells.push_back({spells[i], i});
        }

        // sort the potions and spells array
        sort(potions.begin(), potions.end());
        sort(sortedSpells.begin(), sortedSpells.end());

        int left = 0, right = m;
        // get the no. of successful pairs for each spells
        for(left = 0;left < n;left++){
            // get the  no. of successful pairs for current spell
            while(right >= 1 && (long long)sortedSpells[left].first * potions[right - 1] >= success){
                right--;
            }

            noOfSuccessfulPairs[sortedSpells[left].second] = m - right;
        }

        return noOfSuccessfulPairs;
    }
};
