// iterative approach
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> sets = new ArrayList<>();
        
        sets.add(new ArrayList<>());
        
        for(int num : nums){
            int size = sets.size();
            for(int i = 0;i < size;i++){
                List<Integer> current = new ArrayList<>(sets.get(i));
                current.add(num);
                sets.add(current);
            }
        }
        return sets;
    }
}

// recusive approach
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> powerSet = new ArrayList<>();
        
        findSets(nums, 0, new ArrayList<Integer>(), powerSet);
        
        return powerSet;
    }
    
    private void findSets(int[] nums, int index, List<Integer> current, List<List<Integer>> powerSet){
        
        powerSet.add(new ArrayList<>(current));
        
        for(int i = index;i < nums.length;i++){
            current.add(nums[i]);
            findSets(nums, i + 1, current, powerSet);
            current.remove(current.size() - 1);
        }
    }
}
